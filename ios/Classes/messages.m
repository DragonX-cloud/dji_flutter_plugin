// Autogenerated from Pigeon (v1.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface FLTVersion ()
+ (FLTVersion *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTBattery ()
+ (FLTBattery *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FLTDrone ()
+ (FLTDrone *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTVersion
+ (FLTVersion *)fromMap:(NSDictionary *)dict {
  FLTVersion *result = [[FLTVersion alloc] init];
  result.string = dict[@"string"];
  if ((NSNull *)result.string == [NSNull null]) {
    result.string = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.string ? self.string : [NSNull null]), @"string", nil];
}
@end

@implementation FLTBattery
+ (FLTBattery *)fromMap:(NSDictionary *)dict {
  FLTBattery *result = [[FLTBattery alloc] init];
  result.level = dict[@"level"];
  if ((NSNull *)result.level == [NSNull null]) {
    result.level = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.level ? self.level : [NSNull null]), @"level", nil];
}
@end

@implementation FLTDrone
+ (FLTDrone *)fromMap:(NSDictionary *)dict {
  FLTDrone *result = [[FLTDrone alloc] init];
  result.status = dict[@"status"];
  if ((NSNull *)result.status == [NSNull null]) {
    result.status = nil;
  }
  result.batteryPercent = dict[@"batteryPercent"];
  if ((NSNull *)result.batteryPercent == [NSNull null]) {
    result.batteryPercent = nil;
  }
  result.altitude = dict[@"altitude"];
  if ((NSNull *)result.altitude == [NSNull null]) {
    result.altitude = nil;
  }
  result.latitude = dict[@"latitude"];
  if ((NSNull *)result.latitude == [NSNull null]) {
    result.latitude = nil;
  }
  result.longitude = dict[@"longitude"];
  if ((NSNull *)result.longitude == [NSNull null]) {
    result.longitude = nil;
  }
  result.speed = dict[@"speed"];
  if ((NSNull *)result.speed == [NSNull null]) {
    result.speed = nil;
  }
  result.roll = dict[@"roll"];
  if ((NSNull *)result.roll == [NSNull null]) {
    result.roll = nil;
  }
  result.pitch = dict[@"pitch"];
  if ((NSNull *)result.pitch == [NSNull null]) {
    result.pitch = nil;
  }
  result.yaw = dict[@"yaw"];
  if ((NSNull *)result.yaw == [NSNull null]) {
    result.yaw = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.status ? self.status : [NSNull null]), @"status", (self.batteryPercent ? self.batteryPercent : [NSNull null]), @"batteryPercent", (self.altitude ? self.altitude : [NSNull null]), @"altitude", (self.latitude ? self.latitude : [NSNull null]), @"latitude", (self.longitude ? self.longitude : [NSNull null]), @"longitude", (self.speed ? self.speed : [NSNull null]), @"speed", (self.roll ? self.roll : [NSNull null]), @"roll", (self.pitch ? self.pitch : [NSNull null]), @"pitch", (self.yaw ? self.yaw : [NSNull null]), @"yaw", nil];
}
@end

@interface FLTDjiHostApiCodecReader : FlutterStandardReader
@end
@implementation FLTDjiHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTBattery fromMap:[self readValue]];
    
    case 129:     
      return [FLTVersion fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTDjiHostApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTDjiHostApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTBattery class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FLTVersion class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTDjiHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTDjiHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTDjiHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTDjiHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTDjiHostApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    FLTDjiHostApiCodecReaderWriter *readerWriter = [[FLTDjiHostApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void FLTDjiHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTDjiHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DjiHostApi.getPlatformVersion"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPlatformVersionWithError:)], @"FLTDjiHostApi api doesn't respond to @selector(getPlatformVersionWithError:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTVersion *output = [api getPlatformVersionWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DjiHostApi.getBatteryLevel"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getBatteryLevelWithError:)], @"FLTDjiHostApi api doesn't respond to @selector(getBatteryLevelWithError:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBattery *output = [api getBatteryLevelWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DjiHostApi.registerApp"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registerAppWithError:)], @"FLTDjiHostApi api doesn't respond to @selector(registerAppWithError:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api registerAppWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DjiHostApi.connectDrone"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectDroneWithError:)], @"FLTDjiHostApi api doesn't respond to @selector(connectDroneWithError:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api connectDroneWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DjiHostApi.disconnectDrone"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnectDroneWithError:)], @"FLTDjiHostApi api doesn't respond to @selector(disconnectDroneWithError:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api disconnectDroneWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DjiHostApi.delegateDrone"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(delegateDroneWithError:)], @"FLTDjiHostApi api doesn't respond to @selector(delegateDroneWithError:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api delegateDroneWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DjiHostApi.takeOff"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(takeOffWithError:)], @"FLTDjiHostApi api doesn't respond to @selector(takeOffWithError:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api takeOffWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DjiHostApi.land"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(landWithError:)], @"FLTDjiHostApi api doesn't respond to @selector(landWithError:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api landWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DjiHostApi.timeline"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(timelineWithError:)], @"FLTDjiHostApi api doesn't respond to @selector(timelineWithError:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api timelineWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DjiHostApi.start"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startFlightJson:error:)], @"FLTDjiHostApi api doesn't respond to @selector(startFlightJson:error:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_flightJson = args[0];
        FlutterError *error;
        [api startFlightJson:arg_flightJson error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DjiHostApi.downloadAllMedia"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(downloadAllMediaWithError:)], @"FLTDjiHostApi api doesn't respond to @selector(downloadAllMediaWithError:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api downloadAllMediaWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DjiHostApi.deleteAllMedia"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deleteAllMediaWithError:)], @"FLTDjiHostApi api doesn't respond to @selector(deleteAllMediaWithError:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api deleteAllMediaWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTDjiFlutterApiCodecReader : FlutterStandardReader
@end
@implementation FLTDjiFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTDrone fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTDjiFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTDjiFlutterApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTDrone class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTDjiFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTDjiFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTDjiFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTDjiFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTDjiFlutterApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    FLTDjiFlutterApiCodecReaderWriter *readerWriter = [[FLTDjiFlutterApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


@interface FLTDjiFlutterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTDjiFlutterApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)setStatusDrone:(FLTDrone *)arg_drone completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.DjiFlutterApi.setStatus"
      binaryMessenger:self.binaryMessenger
      codec:FLTDjiFlutterApiGetCodec()];
  [channel sendMessage:@[arg_drone] reply:^(id reply) {
    completion(nil);
  }];
}
@end
