// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FLTVersion ()
+ (FLTVersion *)fromList:(NSArray *)list;
+ (nullable FLTVersion *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTBattery ()
+ (FLTBattery *)fromList:(NSArray *)list;
+ (nullable FLTBattery *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTDrone ()
+ (FLTDrone *)fromList:(NSArray *)list;
+ (nullable FLTDrone *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTMedia ()
+ (FLTMedia *)fromList:(NSArray *)list;
+ (nullable FLTMedia *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTStream ()
+ (FLTStream *)fromList:(NSArray *)list;
+ (nullable FLTStream *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation FLTVersion
+ (instancetype)makeWithString:(nullable NSString *)string {
  FLTVersion* pigeonResult = [[FLTVersion alloc] init];
  pigeonResult.string = string;
  return pigeonResult;
}
+ (FLTVersion *)fromList:(NSArray *)list {
  FLTVersion *pigeonResult = [[FLTVersion alloc] init];
  pigeonResult.string = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable FLTVersion *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTVersion fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.string ?: [NSNull null]),
  ];
}
@end

@implementation FLTBattery
+ (instancetype)makeWithLevel:(nullable NSNumber *)level {
  FLTBattery* pigeonResult = [[FLTBattery alloc] init];
  pigeonResult.level = level;
  return pigeonResult;
}
+ (FLTBattery *)fromList:(NSArray *)list {
  FLTBattery *pigeonResult = [[FLTBattery alloc] init];
  pigeonResult.level = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable FLTBattery *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTBattery fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.level ?: [NSNull null]),
  ];
}
@end

@implementation FLTDrone
+ (instancetype)makeWithStatus:(nullable NSString *)status
    error:(nullable NSString *)error
    batteryPercent:(nullable NSNumber *)batteryPercent
    altitude:(nullable NSNumber *)altitude
    latitude:(nullable NSNumber *)latitude
    longitude:(nullable NSNumber *)longitude
    speed:(nullable NSNumber *)speed
    roll:(nullable NSNumber *)roll
    pitch:(nullable NSNumber *)pitch
    yaw:(nullable NSNumber *)yaw {
  FLTDrone* pigeonResult = [[FLTDrone alloc] init];
  pigeonResult.status = status;
  pigeonResult.error = error;
  pigeonResult.batteryPercent = batteryPercent;
  pigeonResult.altitude = altitude;
  pigeonResult.latitude = latitude;
  pigeonResult.longitude = longitude;
  pigeonResult.speed = speed;
  pigeonResult.roll = roll;
  pigeonResult.pitch = pitch;
  pigeonResult.yaw = yaw;
  return pigeonResult;
}
+ (FLTDrone *)fromList:(NSArray *)list {
  FLTDrone *pigeonResult = [[FLTDrone alloc] init];
  pigeonResult.status = GetNullableObjectAtIndex(list, 0);
  pigeonResult.error = GetNullableObjectAtIndex(list, 1);
  pigeonResult.batteryPercent = GetNullableObjectAtIndex(list, 2);
  pigeonResult.altitude = GetNullableObjectAtIndex(list, 3);
  pigeonResult.latitude = GetNullableObjectAtIndex(list, 4);
  pigeonResult.longitude = GetNullableObjectAtIndex(list, 5);
  pigeonResult.speed = GetNullableObjectAtIndex(list, 6);
  pigeonResult.roll = GetNullableObjectAtIndex(list, 7);
  pigeonResult.pitch = GetNullableObjectAtIndex(list, 8);
  pigeonResult.yaw = GetNullableObjectAtIndex(list, 9);
  return pigeonResult;
}
+ (nullable FLTDrone *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTDrone fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.status ?: [NSNull null]),
    (self.error ?: [NSNull null]),
    (self.batteryPercent ?: [NSNull null]),
    (self.altitude ?: [NSNull null]),
    (self.latitude ?: [NSNull null]),
    (self.longitude ?: [NSNull null]),
    (self.speed ?: [NSNull null]),
    (self.roll ?: [NSNull null]),
    (self.pitch ?: [NSNull null]),
    (self.yaw ?: [NSNull null]),
  ];
}
@end

@implementation FLTMedia
+ (instancetype)makeWithFileName:(nullable NSString *)fileName
    fileUrl:(nullable NSString *)fileUrl
    fileIndex:(nullable NSNumber *)fileIndex {
  FLTMedia* pigeonResult = [[FLTMedia alloc] init];
  pigeonResult.fileName = fileName;
  pigeonResult.fileUrl = fileUrl;
  pigeonResult.fileIndex = fileIndex;
  return pigeonResult;
}
+ (FLTMedia *)fromList:(NSArray *)list {
  FLTMedia *pigeonResult = [[FLTMedia alloc] init];
  pigeonResult.fileName = GetNullableObjectAtIndex(list, 0);
  pigeonResult.fileUrl = GetNullableObjectAtIndex(list, 1);
  pigeonResult.fileIndex = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable FLTMedia *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTMedia fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.fileName ?: [NSNull null]),
    (self.fileUrl ?: [NSNull null]),
    (self.fileIndex ?: [NSNull null]),
  ];
}
@end

@implementation FLTStream
+ (instancetype)makeWithData:(nullable FlutterStandardTypedData *)data {
  FLTStream* pigeonResult = [[FLTStream alloc] init];
  pigeonResult.data = data;
  return pigeonResult;
}
+ (FLTStream *)fromList:(NSArray *)list {
  FLTStream *pigeonResult = [[FLTStream alloc] init];
  pigeonResult.data = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable FLTStream *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTStream fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.data ?: [NSNull null]),
  ];
}
@end

@interface FLTDjiHostApiCodecReader : FlutterStandardReader
@end
@implementation FLTDjiHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLTBattery fromList:[self readValue]];
    case 129: 
      return [FLTMedia fromList:[self readValue]];
    case 130: 
      return [FLTVersion fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLTDjiHostApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTDjiHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTBattery class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTMedia class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTVersion class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLTDjiHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTDjiHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTDjiHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTDjiHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTDjiHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTDjiHostApiCodecReaderWriter *readerWriter = [[FLTDjiHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void FLTDjiHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTDjiHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.getPlatformVersion"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPlatformVersionWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(getPlatformVersionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTVersion *output = [api getPlatformVersionWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.getBatteryLevel"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getBatteryLevelWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(getBatteryLevelWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTBattery *output = [api getBatteryLevelWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.registerApp"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registerAppWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(registerAppWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api registerAppWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.connectDrone"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectDroneWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(connectDroneWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api connectDroneWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.disconnectDrone"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnectDroneWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(disconnectDroneWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api disconnectDroneWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.delegateDrone"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(delegateDroneWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(delegateDroneWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api delegateDroneWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.takeOff"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(takeOffWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(takeOffWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api takeOffWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.land"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(landWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(landWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api landWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.start"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startFlightJson:error:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(startFlightJson:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_flightJson = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startFlightJson:arg_flightJson error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.mobileRemoteController"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(mobileRemoteControllerEnabled:leftStickHorizontal:leftStickVertical:rightStickHorizontal:rightStickVertical:error:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(mobileRemoteControllerEnabled:leftStickHorizontal:leftStickVertical:rightStickHorizontal:rightStickVertical:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_leftStickHorizontal = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_leftStickVertical = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_rightStickHorizontal = GetNullableObjectAtIndex(args, 3);
        NSNumber *arg_rightStickVertical = GetNullableObjectAtIndex(args, 4);
        FlutterError *error;
        [api mobileRemoteControllerEnabled:arg_enabled leftStickHorizontal:arg_leftStickHorizontal leftStickVertical:arg_leftStickVertical rightStickHorizontal:arg_rightStickHorizontal rightStickVertical:arg_rightStickVertical error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.virtualStick"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(virtualStickEnabled:pitch:roll:yaw:verticalThrottle:error:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(virtualStickEnabled:pitch:roll:yaw:verticalThrottle:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_pitch = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_roll = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_yaw = GetNullableObjectAtIndex(args, 3);
        NSNumber *arg_verticalThrottle = GetNullableObjectAtIndex(args, 4);
        FlutterError *error;
        [api virtualStickEnabled:arg_enabled pitch:arg_pitch roll:arg_roll yaw:arg_yaw verticalThrottle:arg_verticalThrottle error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.gimbalRotatePitch"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(gimbalRotatePitchDegrees:error:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(gimbalRotatePitchDegrees:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_degrees = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api gimbalRotatePitchDegrees:arg_degrees error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.getMediaList"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMediaListWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(getMediaListWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<FLTMedia *> *output = [api getMediaListWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.downloadMedia"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(downloadMediaFileIndex:error:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(downloadMediaFileIndex:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_fileIndex = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSString *output = [api downloadMediaFileIndex:arg_fileIndex error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.deleteMedia"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deleteMediaFileIndex:error:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(deleteMediaFileIndex:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_fileIndex = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api deleteMediaFileIndex:arg_fileIndex error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.videoFeedStart"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(videoFeedStartWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(videoFeedStartWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api videoFeedStartWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.videoFeedStop"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(videoFeedStopWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(videoFeedStopWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api videoFeedStopWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.videoRecordStart"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(videoRecordStartWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(videoRecordStartWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api videoRecordStartWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.dji.DjiHostApi.videoRecordStop"
        binaryMessenger:binaryMessenger
        codec:FLTDjiHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(videoRecordStopWithError:)], @"FLTDjiHostApi api (%@) doesn't respond to @selector(videoRecordStopWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api videoRecordStopWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTDjiFlutterApiCodecReader : FlutterStandardReader
@end
@implementation FLTDjiFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLTDrone fromList:[self readValue]];
    case 129: 
      return [FLTStream fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLTDjiFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTDjiFlutterApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTDrone class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTStream class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLTDjiFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTDjiFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTDjiFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTDjiFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTDjiFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTDjiFlutterApiCodecReaderWriter *readerWriter = [[FLTDjiFlutterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface FLTDjiFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTDjiFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)setStatusDrone:(FLTDrone *)arg_drone completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.dji.DjiFlutterApi.setStatus"
      binaryMessenger:self.binaryMessenger
      codec:FLTDjiFlutterApiGetCodec()];
  [channel sendMessage:@[arg_drone ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)sendVideoStream:(FLTStream *)arg_stream completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.dji.DjiFlutterApi.sendVideo"
      binaryMessenger:self.binaryMessenger
      codec:FLTDjiFlutterApiGetCodec()];
  [channel sendMessage:@[arg_stream ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

