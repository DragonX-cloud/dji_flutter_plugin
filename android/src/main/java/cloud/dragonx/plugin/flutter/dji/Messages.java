// Autogenerated from Pigeon (v1.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package cloud.dragonx.plugin.flutter.dji;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Version {
    private String string;
    public String getString() { return string; }
    public void setString(String setterArg) { this.string = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("string", string);
      return toMapResult;
    }
    static Version fromMap(Map<String, Object> map) {
      Version fromMapResult = new Version();
      Object string = map.get("string");
      fromMapResult.string = (String)string;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Battery {
    private Long level;
    public Long getLevel() { return level; }
    public void setLevel(Long setterArg) { this.level = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("level", level);
      return toMapResult;
    }
    static Battery fromMap(Map<String, Object> map) {
      Battery fromMapResult = new Battery();
      Object level = map.get("level");
      fromMapResult.level = (level == null) ? null : ((level instanceof Integer) ? (Integer)level : (Long)level);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Drone {
    private String status;
    public String getStatus() { return status; }
    public void setStatus(String setterArg) { this.status = setterArg; }

    private Double batteryPercent;
    public Double getBatteryPercent() { return batteryPercent; }
    public void setBatteryPercent(Double setterArg) { this.batteryPercent = setterArg; }

    private Double altitude;
    public Double getAltitude() { return altitude; }
    public void setAltitude(Double setterArg) { this.altitude = setterArg; }

    private Double latitude;
    public Double getLatitude() { return latitude; }
    public void setLatitude(Double setterArg) { this.latitude = setterArg; }

    private Double longitude;
    public Double getLongitude() { return longitude; }
    public void setLongitude(Double setterArg) { this.longitude = setterArg; }

    private Double speed;
    public Double getSpeed() { return speed; }
    public void setSpeed(Double setterArg) { this.speed = setterArg; }

    private Double roll;
    public Double getRoll() { return roll; }
    public void setRoll(Double setterArg) { this.roll = setterArg; }

    private Double pitch;
    public Double getPitch() { return pitch; }
    public void setPitch(Double setterArg) { this.pitch = setterArg; }

    private Double yaw;
    public Double getYaw() { return yaw; }
    public void setYaw(Double setterArg) { this.yaw = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("status", status);
      toMapResult.put("batteryPercent", batteryPercent);
      toMapResult.put("altitude", altitude);
      toMapResult.put("latitude", latitude);
      toMapResult.put("longitude", longitude);
      toMapResult.put("speed", speed);
      toMapResult.put("roll", roll);
      toMapResult.put("pitch", pitch);
      toMapResult.put("yaw", yaw);
      return toMapResult;
    }
    static Drone fromMap(Map<String, Object> map) {
      Drone fromMapResult = new Drone();
      Object status = map.get("status");
      fromMapResult.status = (String)status;
      Object batteryPercent = map.get("batteryPercent");
      fromMapResult.batteryPercent = (Double)batteryPercent;
      Object altitude = map.get("altitude");
      fromMapResult.altitude = (Double)altitude;
      Object latitude = map.get("latitude");
      fromMapResult.latitude = (Double)latitude;
      Object longitude = map.get("longitude");
      fromMapResult.longitude = (Double)longitude;
      Object speed = map.get("speed");
      fromMapResult.speed = (Double)speed;
      Object roll = map.get("roll");
      fromMapResult.roll = (Double)roll;
      Object pitch = map.get("pitch");
      fromMapResult.pitch = (Double)pitch;
      Object yaw = map.get("yaw");
      fromMapResult.yaw = (Double)yaw;
      return fromMapResult;
    }
  }
  private static class DjiHostApiCodec extends StandardMessageCodec {
    public static final DjiHostApiCodec INSTANCE = new DjiHostApiCodec();
    private DjiHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Battery.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return Version.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Battery) {
        stream.write(128);
        writeValue(stream, ((Battery) value).toMap());
      } else 
      if (value instanceof Version) {
        stream.write(129);
        writeValue(stream, ((Version) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface DjiHostApi {
    Version getPlatformVersion();
    Battery getBatteryLevel();
    void registerApp();
    void connectDrone();
    void disconnectDrone();
    void delegateDrone();
    void takeOff();
    void land();
    void timeline();
    void start(String flightJson);
    void downloadAllMedia();
    void deleteAllMedia();

    /** The codec used by DjiHostApi. */
    static MessageCodec<Object> getCodec() {
      return DjiHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `DjiHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, DjiHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.getPlatformVersion", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Version output = api.getPlatformVersion();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.getBatteryLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Battery output = api.getBatteryLevel();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.registerApp", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.registerApp();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.connectDrone", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.connectDrone();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.disconnectDrone", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.disconnectDrone();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.delegateDrone", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.delegateDrone();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.takeOff", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.takeOff();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.land", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.land();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.timeline", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.timeline();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.start", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String flightJsonArg = (String)args.get(0);
              if (flightJsonArg == null) {
                throw new NullPointerException("flightJsonArg unexpectedly null.");
              }
              api.start(flightJsonArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.downloadAllMedia", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.downloadAllMedia();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.deleteAllMedia", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.deleteAllMedia();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class DjiFlutterApiCodec extends StandardMessageCodec {
    public static final DjiFlutterApiCodec INSTANCE = new DjiFlutterApiCodec();
    private DjiFlutterApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Drone.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Drone) {
        stream.write(128);
        writeValue(stream, ((Drone) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class DjiFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public DjiFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return DjiFlutterApiCodec.INSTANCE;
    }

    public void setStatus(Drone droneArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiFlutterApi.setStatus", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(droneArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
