// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package cloud.dragonx.plugin.flutter.dji;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Version {
    private @Nullable String string;

    public @Nullable String getString() {
      return string;
    }

    public void setString(@Nullable String setterArg) {
      this.string = setterArg;
    }

    public static final class Builder {

      private @Nullable String string;

      public @NonNull Builder setString(@Nullable String setterArg) {
        this.string = setterArg;
        return this;
      }

      public @NonNull Version build() {
        Version pigeonReturn = new Version();
        pigeonReturn.setString(string);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(string);
      return toListResult;
    }

    static @NonNull Version fromList(@NonNull ArrayList<Object> list) {
      Version pigeonResult = new Version();
      Object string = list.get(0);
      pigeonResult.setString((String) string);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Battery {
    private @Nullable Long level;

    public @Nullable Long getLevel() {
      return level;
    }

    public void setLevel(@Nullable Long setterArg) {
      this.level = setterArg;
    }

    public static final class Builder {

      private @Nullable Long level;

      public @NonNull Builder setLevel(@Nullable Long setterArg) {
        this.level = setterArg;
        return this;
      }

      public @NonNull Battery build() {
        Battery pigeonReturn = new Battery();
        pigeonReturn.setLevel(level);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(level);
      return toListResult;
    }

    static @NonNull Battery fromList(@NonNull ArrayList<Object> list) {
      Battery pigeonResult = new Battery();
      Object level = list.get(0);
      pigeonResult.setLevel((level == null) ? null : ((level instanceof Integer) ? (Integer) level : (Long) level));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Drone {
    private @Nullable String status;

    public @Nullable String getStatus() {
      return status;
    }

    public void setStatus(@Nullable String setterArg) {
      this.status = setterArg;
    }

    private @Nullable String error;

    public @Nullable String getError() {
      return error;
    }

    public void setError(@Nullable String setterArg) {
      this.error = setterArg;
    }

    private @Nullable Double batteryPercent;

    public @Nullable Double getBatteryPercent() {
      return batteryPercent;
    }

    public void setBatteryPercent(@Nullable Double setterArg) {
      this.batteryPercent = setterArg;
    }

    private @Nullable Double altitude;

    public @Nullable Double getAltitude() {
      return altitude;
    }

    public void setAltitude(@Nullable Double setterArg) {
      this.altitude = setterArg;
    }

    private @Nullable Double latitude;

    public @Nullable Double getLatitude() {
      return latitude;
    }

    public void setLatitude(@Nullable Double setterArg) {
      this.latitude = setterArg;
    }

    private @Nullable Double longitude;

    public @Nullable Double getLongitude() {
      return longitude;
    }

    public void setLongitude(@Nullable Double setterArg) {
      this.longitude = setterArg;
    }

    private @Nullable Double speed;

    public @Nullable Double getSpeed() {
      return speed;
    }

    public void setSpeed(@Nullable Double setterArg) {
      this.speed = setterArg;
    }

    private @Nullable Double roll;

    public @Nullable Double getRoll() {
      return roll;
    }

    public void setRoll(@Nullable Double setterArg) {
      this.roll = setterArg;
    }

    private @Nullable Double pitch;

    public @Nullable Double getPitch() {
      return pitch;
    }

    public void setPitch(@Nullable Double setterArg) {
      this.pitch = setterArg;
    }

    private @Nullable Double yaw;

    public @Nullable Double getYaw() {
      return yaw;
    }

    public void setYaw(@Nullable Double setterArg) {
      this.yaw = setterArg;
    }

    public static final class Builder {

      private @Nullable String status;

      public @NonNull Builder setStatus(@Nullable String setterArg) {
        this.status = setterArg;
        return this;
      }

      private @Nullable String error;

      public @NonNull Builder setError(@Nullable String setterArg) {
        this.error = setterArg;
        return this;
      }

      private @Nullable Double batteryPercent;

      public @NonNull Builder setBatteryPercent(@Nullable Double setterArg) {
        this.batteryPercent = setterArg;
        return this;
      }

      private @Nullable Double altitude;

      public @NonNull Builder setAltitude(@Nullable Double setterArg) {
        this.altitude = setterArg;
        return this;
      }

      private @Nullable Double latitude;

      public @NonNull Builder setLatitude(@Nullable Double setterArg) {
        this.latitude = setterArg;
        return this;
      }

      private @Nullable Double longitude;

      public @NonNull Builder setLongitude(@Nullable Double setterArg) {
        this.longitude = setterArg;
        return this;
      }

      private @Nullable Double speed;

      public @NonNull Builder setSpeed(@Nullable Double setterArg) {
        this.speed = setterArg;
        return this;
      }

      private @Nullable Double roll;

      public @NonNull Builder setRoll(@Nullable Double setterArg) {
        this.roll = setterArg;
        return this;
      }

      private @Nullable Double pitch;

      public @NonNull Builder setPitch(@Nullable Double setterArg) {
        this.pitch = setterArg;
        return this;
      }

      private @Nullable Double yaw;

      public @NonNull Builder setYaw(@Nullable Double setterArg) {
        this.yaw = setterArg;
        return this;
      }

      public @NonNull Drone build() {
        Drone pigeonReturn = new Drone();
        pigeonReturn.setStatus(status);
        pigeonReturn.setError(error);
        pigeonReturn.setBatteryPercent(batteryPercent);
        pigeonReturn.setAltitude(altitude);
        pigeonReturn.setLatitude(latitude);
        pigeonReturn.setLongitude(longitude);
        pigeonReturn.setSpeed(speed);
        pigeonReturn.setRoll(roll);
        pigeonReturn.setPitch(pitch);
        pigeonReturn.setYaw(yaw);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(10);
      toListResult.add(status);
      toListResult.add(error);
      toListResult.add(batteryPercent);
      toListResult.add(altitude);
      toListResult.add(latitude);
      toListResult.add(longitude);
      toListResult.add(speed);
      toListResult.add(roll);
      toListResult.add(pitch);
      toListResult.add(yaw);
      return toListResult;
    }

    static @NonNull Drone fromList(@NonNull ArrayList<Object> list) {
      Drone pigeonResult = new Drone();
      Object status = list.get(0);
      pigeonResult.setStatus((String) status);
      Object error = list.get(1);
      pigeonResult.setError((String) error);
      Object batteryPercent = list.get(2);
      pigeonResult.setBatteryPercent((Double) batteryPercent);
      Object altitude = list.get(3);
      pigeonResult.setAltitude((Double) altitude);
      Object latitude = list.get(4);
      pigeonResult.setLatitude((Double) latitude);
      Object longitude = list.get(5);
      pigeonResult.setLongitude((Double) longitude);
      Object speed = list.get(6);
      pigeonResult.setSpeed((Double) speed);
      Object roll = list.get(7);
      pigeonResult.setRoll((Double) roll);
      Object pitch = list.get(8);
      pigeonResult.setPitch((Double) pitch);
      Object yaw = list.get(9);
      pigeonResult.setYaw((Double) yaw);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Media {
    private @Nullable String fileName;

    public @Nullable String getFileName() {
      return fileName;
    }

    public void setFileName(@Nullable String setterArg) {
      this.fileName = setterArg;
    }

    private @Nullable String fileUrl;

    public @Nullable String getFileUrl() {
      return fileUrl;
    }

    public void setFileUrl(@Nullable String setterArg) {
      this.fileUrl = setterArg;
    }

    private @Nullable Long fileIndex;

    public @Nullable Long getFileIndex() {
      return fileIndex;
    }

    public void setFileIndex(@Nullable Long setterArg) {
      this.fileIndex = setterArg;
    }

    public static final class Builder {

      private @Nullable String fileName;

      public @NonNull Builder setFileName(@Nullable String setterArg) {
        this.fileName = setterArg;
        return this;
      }

      private @Nullable String fileUrl;

      public @NonNull Builder setFileUrl(@Nullable String setterArg) {
        this.fileUrl = setterArg;
        return this;
      }

      private @Nullable Long fileIndex;

      public @NonNull Builder setFileIndex(@Nullable Long setterArg) {
        this.fileIndex = setterArg;
        return this;
      }

      public @NonNull Media build() {
        Media pigeonReturn = new Media();
        pigeonReturn.setFileName(fileName);
        pigeonReturn.setFileUrl(fileUrl);
        pigeonReturn.setFileIndex(fileIndex);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(fileName);
      toListResult.add(fileUrl);
      toListResult.add(fileIndex);
      return toListResult;
    }

    static @NonNull Media fromList(@NonNull ArrayList<Object> list) {
      Media pigeonResult = new Media();
      Object fileName = list.get(0);
      pigeonResult.setFileName((String) fileName);
      Object fileUrl = list.get(1);
      pigeonResult.setFileUrl((String) fileUrl);
      Object fileIndex = list.get(2);
      pigeonResult.setFileIndex((fileIndex == null) ? null : ((fileIndex instanceof Integer) ? (Integer) fileIndex : (Long) fileIndex));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Stream {
    private @Nullable byte[] data;

    public @Nullable byte[] getData() {
      return data;
    }

    public void setData(@Nullable byte[] setterArg) {
      this.data = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] data;

      public @NonNull Builder setData(@Nullable byte[] setterArg) {
        this.data = setterArg;
        return this;
      }

      public @NonNull Stream build() {
        Stream pigeonReturn = new Stream();
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(data);
      return toListResult;
    }

    static @NonNull Stream fromList(@NonNull ArrayList<Object> list) {
      Stream pigeonResult = new Stream();
      Object data = list.get(0);
      pigeonResult.setData((byte[]) data);
      return pigeonResult;
    }
  }

  private static class DjiHostApiCodec extends StandardMessageCodec {
    public static final DjiHostApiCodec INSTANCE = new DjiHostApiCodec();

    private DjiHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Battery.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return Media.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return Version.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Battery) {
        stream.write(128);
        writeValue(stream, ((Battery) value).toList());
      } else if (value instanceof Media) {
        stream.write(129);
        writeValue(stream, ((Media) value).toList());
      } else if (value instanceof Version) {
        stream.write(130);
        writeValue(stream, ((Version) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface DjiHostApi {

    @NonNull 
    Version getPlatformVersion();

    @NonNull 
    Battery getBatteryLevel();

    void registerApp();

    void connectDrone();

    void disconnectDrone();

    void delegateDrone();

    void takeOff();

    void land();

    void start(@NonNull String flightJson);

    void mobileRemoteController(@NonNull Boolean enabled, @NonNull Double leftStickHorizontal, @NonNull Double leftStickVertical, @NonNull Double rightStickHorizontal, @NonNull Double rightStickVertical);

    void virtualStick(@NonNull Boolean enabled, @NonNull Double pitch, @NonNull Double roll, @NonNull Double yaw, @NonNull Double verticalThrottle);

    void gimbalRotatePitch(@NonNull Double degrees);

    @NonNull 
    List<Media> getMediaList();

    @NonNull 
    String downloadMedia(@NonNull Long fileIndex);

    @NonNull 
    Boolean deleteMedia(@NonNull Long fileIndex);

    void videoFeedStart();

    void videoFeedStop();

    void videoRecordStart();

    void videoRecordStop();

    /** The codec used by DjiHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return DjiHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `DjiHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable DjiHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.getPlatformVersion", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Version output = api.getPlatformVersion();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.getBatteryLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Battery output = api.getBatteryLevel();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.registerApp", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.registerApp();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.connectDrone", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.connectDrone();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.disconnectDrone", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.disconnectDrone();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.delegateDrone", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.delegateDrone();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.takeOff", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.takeOff();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.land", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.land();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.start", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String flightJsonArg = (String) args.get(0);
                try {
                  api.start(flightJsonArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.mobileRemoteController", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enabledArg = (Boolean) args.get(0);
                Double leftStickHorizontalArg = (Double) args.get(1);
                Double leftStickVerticalArg = (Double) args.get(2);
                Double rightStickHorizontalArg = (Double) args.get(3);
                Double rightStickVerticalArg = (Double) args.get(4);
                try {
                  api.mobileRemoteController(enabledArg, leftStickHorizontalArg, leftStickVerticalArg, rightStickHorizontalArg, rightStickVerticalArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.virtualStick", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enabledArg = (Boolean) args.get(0);
                Double pitchArg = (Double) args.get(1);
                Double rollArg = (Double) args.get(2);
                Double yawArg = (Double) args.get(3);
                Double verticalThrottleArg = (Double) args.get(4);
                try {
                  api.virtualStick(enabledArg, pitchArg, rollArg, yawArg, verticalThrottleArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.gimbalRotatePitch", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Double degreesArg = (Double) args.get(0);
                try {
                  api.gimbalRotatePitch(degreesArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.getMediaList", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  List<Media> output = api.getMediaList();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.downloadMedia", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number fileIndexArg = (Number) args.get(0);
                try {
                  String output = api.downloadMedia((fileIndexArg == null) ? null : fileIndexArg.longValue());
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.deleteMedia", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number fileIndexArg = (Number) args.get(0);
                try {
                  Boolean output = api.deleteMedia((fileIndexArg == null) ? null : fileIndexArg.longValue());
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.videoFeedStart", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.videoFeedStart();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.videoFeedStop", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.videoFeedStop();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.videoRecordStart", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.videoRecordStart();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.dji.DjiHostApi.videoRecordStop", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.videoRecordStop();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class DjiFlutterApiCodec extends StandardMessageCodec {
    public static final DjiFlutterApiCodec INSTANCE = new DjiFlutterApiCodec();

    private DjiFlutterApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Drone.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return Stream.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Drone) {
        stream.write(128);
        writeValue(stream, ((Drone) value).toList());
      } else if (value instanceof Stream) {
        stream.write(129);
        writeValue(stream, ((Stream) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class DjiFlutterApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public DjiFlutterApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by DjiFlutterApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return DjiFlutterApiCodec.INSTANCE;
    }
    public void setStatus(@NonNull Drone droneArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.dji.DjiFlutterApi.setStatus", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(droneArg)),
          channelReply -> callback.reply(null));
    }
    public void sendVideo(@NonNull Stream streamArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.dji.DjiFlutterApi.sendVideo", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(streamArg)),
          channelReply -> callback.reply(null));
    }
  }
}
